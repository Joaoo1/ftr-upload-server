name: widget-server pipe

on:
    push:
        branches:
        - main

jobs:
    build:
        name: "Build"
        runs-on: ubuntu-latest

        steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ vars.AWS_REGION }}      

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Build docker image to scan for vulnerabilities
          uses: docker/build-push-action@v2
          with:
            context: .
            load: true
            tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPOSITORY }}:scan
            cache-from: type=gha
            cache-to: type=gha,mode=max

        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@0.28.0
          with:
            image-ref: '${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPOSITORY }}:scan'
            format: 'table'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
            
        - name: Build, tag, and push docker image to Amazon ECR
          uses: docker/build-push-action@v2
          with:
            context: .
            push: true
            cache-from: type=gha
            tags: ${{ steps.login-ecr.outputs.registry }}/${{ vars.AWS_ECR_REPOSITORY }}:${{ github.sha }}
        
        # Manually build and push docker image
        # - name: Build, tag, and push docker image to Amazon ECR
        #   env:
        #     REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        #     REPOSITORY: silvajoao/widget-server
        #     IMAGE_TAG: ${{ github.sha }}
        #   run: |
        #         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        #         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG